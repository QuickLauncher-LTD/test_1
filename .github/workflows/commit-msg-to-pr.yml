name: Update PR Description with Commit Messages and AI Summary

on:
  pull_request_target:
    types: [opened, reopened, synchronize]

jobs:
  update-description:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          
      - name: Get Commit Messages
        id: get-commit-messages
        # run: |
        #   # 커밋 메시지를 추출합니다.
        #   commit_messages=$(git log --reverse --format='%B%n' origin/${{ github.base_ref }}..origin/${{ github.head_ref }})
          
        #   # Markdown 형식으로 포맷팅합니다.
        #   formatted_messages=""
        #   IFS=$'\n\n' # 커밋 메시지들을 분리하는 구분자를 설정합니다.
        #   for message in $commit_messages; do
        #     # 커밋 메시지의 첫 줄(제목)을 추출합니다.
        #     title=$(echo "$message" | head -n 1)
        #     # 커밋 메시지의 나머지 부분(본문)을 추출합니다.
        #     body=$(echo "$message" | tail -n +2)
            
        #     # Markdown 형식으로 포맷팅합니다.
        #     if [ ! -z "$body" ]; then
        #       formatted_messages+="- **$title**\n  - $body\n\n"
        #     else
        #       formatted_messages+="- **$title**\n\n"
        #     fi
        #   done
          
        #   # 포맷팅된 메시지를 출력 변수로 설정합니다.
        #   formatted_messages="${formatted_messages//'%'/'%25'}"
        #   formatted_messages="${formatted_messages//$'\n'/'%0A'}"
        #   formatted_messages="${formatted_messages//$'\r'/'%0D'}"
        #   echo "::set-output name=formatted_messages::$formatted_messages"
        run: |
          IFS=$'\n\n' # 커밋 메시지 단위로 분리합니다.
          commit_messages=$(git log --reverse --format='%B%n' origin/${{ github.base_ref }}..origin/${{ github.head_ref }})
          formatted_messages=""
        
          readarray -t messages <<<"$commit_messages" # 커밋 메시지를 배열로 변환합니다.
          for message in "${messages[@]}"; do
            if [[ -z "$message" ]]; then
              continue # 빈 메시지는 건너뜁니다.
            fi
            
            # 제목과 본문을 분리합니다.
            title=$(echo "$message" | head -n1)
            body=$(echo "$message" | tail -n +2)
            
            # 본문이 있는 경우, 본문의 각 항목을 처리합니다.
            if [[ ! -z "$body" ]]; then
              body_lines=""
              IFS=$'\n' # 본문 내부의 개행으로 분리합니다.
              readarray -t lines <<<"$body"
              for line in "${lines[@]}"; do
                if [[ -z "$line" ]]; then
                  continue
                fi
                body_lines+="  - $line\n"
              done
              formatted_messages+="- **$title**\n$body_lines\n"
            else
              formatted_messages+="- **$title**\n\n"
            fi
          done
        
          # 포맷팅된 커밋 메시지를 GitHub Actions의 출력 변수로 설정합니다.
          formatted_messages="${formatted_messages//'%'/'%25'}"
          formatted_messages="${formatted_messages//$'\n'/'%0A'}"
          formatted_messages="${formatted_messages//$'\r'/'%0D'}"
          echo "::set-output name=messages::$formatted_messages"
        # run: |
        #   commit_messages=$(git log --reverse --format='%B%n' origin/${{ github.base_ref }}..origin/${{ github.head_ref }})
        #   commit_messages="${commit_messages//'%'/'%25'}"
        #   commit_messages="${commit_messages//$'\n'/'%0A'}"
        #   commit_messages="${commit_messages//$'\r'/'%0D'}"
        #   echo "::set-output name=messages::$commit_messages"
          
      - name: Ask ChatGPT for Summary
        id: chatgpt
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          cat > payload.json <<EOF
          {
            "model": "gpt-3.5-turbo",
            "messages": [
              {
                "role": "system",
                "content": "You are a helpful assistant."
              },
              {
                "role": "user",
                "content": "다음은 GitHub에서의 최근 커밋 메시지(title, body)들입니다. 각 커밋의 내용을 요약하고, 전체적인 변경 사항에 대한 개요를 한 줄로 제공해주세요. MD파일 양식으로 작성되므로 title은 -**[TITLE]**, body는 >[BODY] 규격에 맞게 작성합니다. 커밋 메시지들은 다음과 같습니다:\n${{ steps.get-commit-messages.outputs.messages }}"
              }
            ],
            "temperature": 0.7,
            "max_tokens": 250
          }
          EOF
        
          response=$(curl -s -X POST "https://api.openai.com/v1/chat/completions" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $OPENAI_API_KEY" \
            -d @payload.json)
          summary=$(echo $response | jq -r '.choices[0].message.content')
          summary="${summary//'%'/'%25'}"
          summary="${summary//$'\n'/'%0A'}"
          summary="${summary//$'\r'/'%0D'}"
          echo "::set-output name=summary::$summary"

      - name: Find and Remove Previous Comment
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          comment_id=$(gh pr view ${{ github.event.pull_request.number }} --repo ${{ github.repository }} --json comments -q '.comments[].id' | jq 'select(.body | contains("<!-- AI Summary Marker -->"))' | jq '.id')
          echo "$comment_id"
          if [ ! -z "$comment_id" ]; then
            gh api -X DELETE /repos/${{ github.repository }}/issues/comments/$comment_id
          fi

      
      - name: Update PR description
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PR_DESCRIPTION=$(gh pr view ${{ github.event.pull_request.number }} --repo ${{ github.repository }} --json body -q .body)
          COMMIT_MESSAGES_FORMATTED=$(echo "${{ steps.get-commit-messages.outputs.messages }}" | sed 's/%0A/\n/g')
          AI_SUMMARY=$(echo "${{ steps.chatgpt.outputs.summary }}" | sed 's/%0A/\n/g')
          
          UPDATED_DESCRIPTION="
          ---
          <!-- Auto PR Summary Marker -->
          
          # ✅  PR Check List
          - [ ] Self code review finished
          - [ ] Spotless / static analysis finished
          - [ ] Module test finished
          - [ ] All bugs are fixed

          # 💻  주요 개발 내용
          #### 커밋 메시지
          \`\`\`
          ${COMMIT_MESSAGES_FORMATTED}
          \`\`\`

          # 🤖 AI 요약
          ${AI_SUMMARY}

          # ⚙️ 테스트 내용 (모듈검증)

          # ⚙️ 테스트 내용 (통합검증)
          - 로컬 통합 테스트

          # ❓ Known issue
          - 없음

          # 🙏 To Reviewer
          - 없음

          # 🎫 Ticket 
          "

          gh pr edit ${{ github.event.pull_request.number }} --repo ${{ github.repository }} --body "$UPDATED_DESCRIPTION"
