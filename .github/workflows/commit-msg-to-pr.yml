name: Update PR Description with Commit Messages and AI Summary

on:
  pull_request_target:
    types: [opened, reopened, synchronize]

jobs:
  update-description:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get Commit Messages
        id: get-commit-messages
        run: |
          commit_messages=$(git log --reverse --format='%s%n%n%b%n₩₩₩₩₩' origin/${{ github.base_ref }}..origin/${{ github.head_ref }})
          echo "$commit_messages"
          
          # Markdown 형식으로 포맷팅합니다.
          formatted_messages=""
          IFS=$'₩₩₩₩₩' 
          for message in $commit_messages; do
            message=$(echo "$message" | sed '/^$/d')
            title=$(echo "$message" | head -n 1)
            body=$(echo "$message" | tail -n +2)

            echo "Message: ${message}"
            echo "Title: ${title}"
            echo "Body: ${body}"

            title_trimmed=$(echo "$title" | xargs)
            body_trimmed=$(echo "$body" | xargs)
            
            if [ -z "$title" ]; then
              continue
            fi
            
            if [ ! -z "$body" ]; then
              formatted_messages+="- **$title_trimmed**  %0A> $body_trimmed%0A%0A"
            else
              formatted_messages+="- **$title_trimmed**%0A%0A"
            fi
          done

          echo "$formatted_messages"
          # 포맷팅된 메시지를 출력 변수로 설정합니다.
          formatted_messages="${formatted_messages//'%'/'%25'}"
          formatted_messages="${formatted_messages//$'\n'/'%0A'}"
          formatted_messages="${formatted_messages//$'\r'/'%0D'}"
          echo "::set-output name=messages::$formatted_messages"

        
      - name: Ask ChatGPT for Summary
        id: chatgpt
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          cat > payload.json <<EOF
          {
            "model": "gpt-3.5-turbo",
            "messages": [
              {
                "role": "system",
                "content": "You are a helpful assistant."
              },
              {
                "role": "user",
                "content": "다음은 GitHub에서의 최근 커밋 메시지들입니다. 각 커밋의 제목과 본문을 요약하고, 커밋 메시지 당 숫자로 구분합니다. MD 파일 양식에 맞게, 각 커밋의 제목은 볼드(**)로 표시하고, 본문은 인용구(>)로 표시합니다. 커밋 메시지들은 다음과 같습니다:\n${{ steps.get-commit-messages.outputs.messages }}"
              }
            ],
            "temperature": 0.7,
            "max_tokens": 500
          }
          EOF
        
          response=$(curl -s -X POST "https://api.openai.com/v1/chat/completions" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $OPENAI_API_KEY" \
            -d @payload.json)
          summary=$(echo $response | jq -r '.choices[0].message.content')
          summary="${summary//'%'/'%25'}"
          summary="${summary//$'\n'/'%0A'}"
          summary="${summary//$'\r'/'%0D'}"
          echo "::set-output name=summary::$summary"

      - name: Find and Remove Previous Comment
        if: github.event.action == 'opened'
        env:
          GITHUB_TOKEN: ${{ secrets.DAE_GITHUB_TOKEN }}
        run: |
          comment_id=$(gh pr view ${{ github.event.pull_request.number }} --repo ${{ github.repository }} --json comments -q '.comments[].id' | jq 'select(.body | contains("<!-- AI Summary Marker -->"))' | jq '.id')
          echo "$comment_id"
          if [ ! -z "$comment_id" ]; then
            gh api -X DELETE /repos/${{ github.repository }}/issues/comments/$comment_id
          fi

      
      - name: Update PR description
        if: github.event.action == 'opened'
        env:
          GITHUB_TOKEN: ${{ secrets.DAE_GITHUB_TOKEN }}
        run: |
          PR_DESCRIPTION=$(gh pr view ${{ github.event.pull_request.number }} --repo ${{ github.repository }} --json body -q .body)
          COMMIT_MESSAGES_FORMATTED=$(echo "${{ steps.get-commit-messages.outputs.messages }}" | sed 's/%0A/\n/g')
          AI_SUMMARY=$(echo "${{ steps.chatgpt.outputs.summary }}" | sed 's/%0A/\n/g')
          
          UPDATED_DESCRIPTION="
          ---
          <!-- Auto PR Summary Marker -->
          
          # ✅  PR Check List
          - [ ] Self code review finished
          - [ ] Spotless / static analysis finished
          - [ ] Module test finished
          - [ ] All bugs are fixed

          # 💻  주요 개발 내용
          #### 커밋 메시지
          ${COMMIT_MESSAGES_FORMATTED}

          # 🤖 AI 요약
          ${AI_SUMMARY}

          # ⚙️ 테스트 내용 (모듈검증)

          # ⚙️ 테스트 내용 (통합검증)
          - 로컬 통합 테스트

          # ❓ Known issue
          - 없음

          # 🙏 To Reviewer
          - 없음

          # 🎫 Ticket 
          "

          gh pr edit ${{ github.event.pull_request.number }} --repo ${{ github.repository }} --body "$UPDATED_DESCRIPTION"

          
      - name: Update PR description with markers
        if: (github.event.action == 'synchronize' || github.event.action == 'reopened')
        env:
          GITHUB_TOKEN: ${{ secrets.DAE_GITHUB_TOKEN }}
        run: |
          # 기존 PR 설명 가져오기
          PR_DESCRIPTION=$(gh pr view ${{ github.event.pull_request.number }} --repo ${{ github.repository }} --json body -q .body)
          
          # 커밋 메시지와 AI 요약을 업데이트하기 위한 새로운 내용
          NEW_COMMIT_MESSAGES=$(echo "${{ steps.get-commit-messages.outputs.messages }}" | sed 's/%0A/\n/g')
          NEW_AI_SUMMARY=$(echo "${{ steps.chatgpt.outputs.summary }}" | sed 's/%0A/\n/g')
          
          # 마커를 사용하여 기존 설명에서 커밋 메시지와 AI 요약 섹션을 식별
          BEFORE_COMMIT_MESSAGES=$(echo "$PR_DESCRIPTION" | sed -n '/<!-- Auto PR Summary Marker -->/,/#### 커밋 메시지/p' | sed '$d')
          AFTER_AI_SUMMARY=$(echo "$PR_DESCRIPTION" | sed -n '/# ❓ Known issue/,$p')

          # 새로운 PR 설명 생성
          UPDATED_DESCRIPTION="${BEFORE_COMMIT_MESSAGES}
          #### 커밋 메시지
          ${NEW_COMMIT_MESSAGES}

          # 🤖 AI 요약
          ${NEW_AI_SUMMARY}
          
          ${AFTER_AI_SUMMARY}"

          # PR 설명 업데이트
          gh pr edit ${{ github.event.pull_request.number }} --repo ${{ github.repository }} --body "$UPDATED_DESCRIPTION"
